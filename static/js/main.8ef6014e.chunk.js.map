{"version":3,"sources":["images/brandImg.svg","components/Nav.js","images/wallpaper/wallpaper.jpg","App.js","reportWebVitals.js","index.js"],"names":["navReducer","state","action","type","selectedOption","data","inputValue","collapseMenu","Nav","options","timeout","useRef","useReducer","navState","navDispatcher","AppBar","sx","position","backgroundColor","Toolbar","p","Grid","container","alignItems","direction","xs","md","item","width","Box","display","component","src","brandIcon","height","Typography","variant","fontWeight","ml","IconButton","onClick","color","sm","spacing","justifyContent","flex","py","flexGrow","lg","Autocomplete","borderRadius","getOptionLabel","option","address","value","onChange","e","newValue","onInputChange","newInputValue","renderInput","params","TextField","InputProps","size","placeholder","margin","startAdornment","InputAdornment","Stack","Button","App","rowSpacing","backgroundImage","wallpaper","backgroundSize","backgroundPosition","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ef6014e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/brandImg.7eb91340.svg\";","import { useReducer, useRef } from 'react';\r\nimport { Box, AppBar, Toolbar, Grid, Autocomplete, TextField, InputAdornment, Button, Stack, Typography } from '@material-ui/core';\r\nimport brandIcon from \"../images/brandImg.svg\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nconst navReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'setSelectedOption':\r\n            return { ...state, selectedOption: action.data };\r\n        case 'setInputValue':\r\n            return { ...state, inputValue: action.data };\r\n        case 'toggleCollapseButton':\r\n            return {...state, collapseMenu:!state.collapseMenu}\r\n        default:\r\n            return { ...state };\r\n    }\r\n};\r\n\r\nfunction Nav() {\r\n    const state = { selectedOption: null, inputValue: '', options: [], collapseMenu: false, timeout: useRef(null)};\r\n    const [navState, navDispatcher] = useReducer(navReducer, state);\r\n    return (\r\n        <>\r\n            <AppBar sx={{ position: 'fixed', backgroundColor: 'black' }}>\r\n                <Toolbar sx={{p:'6px'}}>\r\n                    <Grid container sx={{ alignItems: 'center', direction: { xs: 'column', md: 'row' } }}>\r\n                        {/* brand container */}\r\n                        <Grid container item sx={{ alignItems: 'center', width: { xs: '1', md: 'auto' } }}>\r\n                            {/* brand logo */}\r\n                            <Grid item>\r\n                                <Box display='block' component='img' src={brandIcon} sx={{ width: '2.5rem', height: '2.5rem' }} />\r\n                            </Grid>\r\n                            {/* brand text */}\r\n                            <Grid item>\r\n                                <Typography variant='h6' sx={{fontWeight:'400'}}>API Weather App</Typography>\r\n                            </Grid>\r\n                            {/* nav collapse button  */}\r\n                            <Grid item sx={{ ml: 'auto' }}>\r\n                                <IconButton onClick={()=>navDispatcher({type:'toggleCollapseButton'})}>\r\n                                    <MenuIcon sx={{ color: 'white', display: { md: 'none', xs: 'block' } }} />\r\n                                </IconButton>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {/* search container */}\r\n                        <Grid item container direction={{ xs: 'column-reverse', sm: 'row' }} spacing='10' justifyContent='center' alignItems='center' flex='1' py='10px'\r\n                            display={{md:'flex', xs:`${navState.collapseMenu? 'none' : 'flex'}`}}>\r\n                            {/* search field */}\r\n                            <Grid item flexGrow={{ sm:'1', md:'0.8', lg:'0.5'}} width={{xs:'100%', sm:'auto'}}>\r\n                                <Autocomplete sx={{ backgroundColor: 'white', borderRadius: '0.7rem' }}\r\n                                    getOptionLabel={(option) => option.address}\r\n                                    options={navState.options}\r\n                                    value={navState.selectedOption}\r\n                                    onChange={(e, newValue) => {\r\n                                        navDispatcher({ type: 'setSelectedOption', data: newValue });\r\n                                        navDispatcher({ type: 'setInputValue', data: newValue });\r\n                                    }}\r\n                                    onInputChange={(e, newInputValue) => {\r\n                                        navDispatcher({ type: 'setInputValue', data: newInputValue });\r\n                                    }}\r\n                                    renderInput={(params) =>\r\n                                        <TextField {...params}\r\n                                            InputProps={{\r\n                                                ...params.InputProps,\r\n                                                size: 'small',\r\n                                                placeholder: 'Enter the Name of a Location',\r\n                                                margin: 'dense',\r\n                                                startAdornment: (<InputAdornment position='start'><SearchIcon /></InputAdornment>)\r\n                                            }}\r\n                                        />}\r\n                                />\r\n                            </Grid>\r\n                            {/* button container  */}\r\n                            <Grid item>\r\n                                <Stack direction='row' spacing={1}>\r\n                                    <Button variant='outlined' size='small' sx={{ color: 'primary.light',  }} >Get Forecast</Button>\r\n                                    <Button variant='outlined' size='small' color='error' sx={{ color: 'error.light' }} >Options</Button>\r\n                                </Stack>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Toolbar />\r\n        </>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Nav;","export default __webpack_public_path__ + \"static/media/wallpaper.dac49862.jpg\";","import { Grid} from \"@material-ui/core\";\nimport Nav from \"./components/Nav\";\nimport wallpaper from \"./images/wallpaper/wallpaper.jpg\";\nfunction App() {\n  return (\n    <>\n      <Nav />\n      <Grid container direction='column' rowSpacing={3} sx={{height:'100vh', backgroundImage:`url(${wallpaper})`, backgroundSize:'cover', backgroundPosition:'center'}}>\n        <Grid item></Grid>\n        <Grid item></Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}