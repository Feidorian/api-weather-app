{"version":3,"sources":["images/brandImg.svg","components/Nav.js","components/wallpaperList.js","images/wallpaper/wallpaper.jpg","images/wallpaper/wallpaper2.jpg","images/wallpaper/wallpaper3.jpg","images/wallpaper/wallpaper4.jpg","images/wallpaper/wallpaper5.jpg","images/wallpaper/wallpaper6.jpg","images/wallpaper/wallpaper7.jpg","images/wallpaper/wallpaper8.jpg","images/wallpaper/wallpaper9.jpg","images/wallpaper/wallpaper10.jpg","images/wallpaper/wallpaper11.jpg","images/wallpaper/wallpaper12.jpg","components/Options.js","images/pressure.svg","images/humidity.svg","components/Locations.js","components/Forecast.js","images/weather-icons/sunny.svg","App.js","reportWebVitals.js","index.js"],"names":["getDay","unixTime","moment","unix","format","getDate","hour","parseInt","minute","getTime","makeOpenWeatherApiRequest","dispatcher","newLocation","fetch","body","JSON","stringify","target","lon","lat","then","response","json","data","console","log","current","daily","day","dt","date","timezone","sunrise","sunset","temp","icon","weather","weatherStatus","main","shortDescription","description","humidity","pressure","windSpeed","wind_speed","visibility","formatCurrentData","map","item","dayTemp","nightTemp","night","mornTemp","morn","eveTemp","eve","minTemp","min","maxTemp","max","formatDailyData","Error","type","catch","error","Report","failure","message","navReducer","state","action","selectedOption","options","inputValue","Nav","appState","appDispatcher","timeout","useRef","useReducer","navState","navDispatcher","useEffect","query","clearTimeout","setTimeout","results","length","address","formatted_address","name","location","geometry","filter","i","idx","err","AppBar","sx","position","backgroundColor","Toolbar","p","Grid","container","alignItems","direction","xs","md","width","Box","display","component","src","brandIcon","height","Typography","variant","fontWeight","IconButton","color","ml","onClick","sm","spacing","justifyContent","flex","py","collapseButton","flexGrow","lg","Autocomplete","borderRadius","getOptionLabel","option","filterOptions","x","value","onChange","e","newValue","onInputChange","newInputValue","renderInput","params","TextField","InputProps","size","placeholder","margin","startAdornment","InputAdornment","Stack","Button","city","lng","svgSize","messageFontSize","messageColor","wallpaperList","Options","Dialog","open","settings","onClose","fullWidth","DialogTitle","DialogContent","pb","enableLocalStorage","Container","Switch","checked","degUnit","Alert","mx","fontSize","ImageList","cols","rowHeight","key","ImageListItem","backgroundImage","backgroundSize","cursor","wallpaper","Item","useState","openOptions","setOpenOptions","mb","Paper","elevation","background","border","columnSpacing","alignSelf","toFixed","getTempF","id","currentTarget","className","anchorEl","Boolean","MenuItem","updatedLocation","Confirm","show","titleColor","fontFamily","useGoogleFont","mt","textAlign","flexWrap","alt","style","Locations","px","severity","borderColor","overflowX","locationList","generator","generate","minWidth","maxWidth","Forecast","selectedForecast","deleteLocalStorage","localStorage","setItem","newList","onAddForecast","find","onDeleteForecast","App","use100vh","getItem","newState","parse","window","innerHeight","backgroundPosition","overflowY","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","warn","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6a8db1a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/brandImg.7eb91340.svg\";","import { useReducer, useRef, useEffect } from 'react';\r\nimport { Box, AppBar, Toolbar, Grid, Autocomplete, TextField, InputAdornment, Button, Stack, Typography } from '@material-ui/core';\r\nimport brandIcon from \"../images/brandImg.svg\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport moment from 'moment';\r\nimport { Report } from \"notiflix\";\r\n\r\nexport const getDay = (unixTime) => {\r\n    return moment.unix(unixTime).format(\"dddd\");\r\n};\r\nexport const getDate = (unixTime) => {\r\n    let hour = parseInt(moment.unix(unixTime).format(\"HH\"));\r\n    let minute = moment.unix(unixTime).format(\"mm\");\r\n    hour = hour > 12 ? `${hour - 12}:${minute}pm` : `${hour}:${minute}am`;\r\n    let date = `${moment.unix(unixTime).format(\"MMM, Do,\")} ${hour}`;\r\n    return date;\r\n};\r\nexport const getDateOnly = (unixTime) => {\r\n    return moment.unix(unixTime).format(\"MMM, Do, YYYY\");\r\n}\r\n\r\nexport const getTime = (unixTime) => {\r\n    let hour = parseInt(moment.unix(unixTime).format(\"HH\"));\r\n    let minute = moment.unix(unixTime).format(\"mm\");\r\n    hour = hour > 12 ? `${hour - 12}:${minute}pm` : `${hour}:${minute}am`;\r\n    return hour;\r\n}\r\n\r\nconst formatCurrentData = (data) =>\r\n({\r\n    day: getDay(data.current.dt),\r\n    date: getDate(data.current.dt),\r\n    timezone: data.timezone,\r\n    sunrise: getTime(data.current.sunrise),\r\n    sunset: getTime(data.current.sunset),\r\n    temp: data.current.temp,\r\n    icon: data.current.weather[0].icon,\r\n    weatherStatus: data.current.weather[0].main,\r\n    shortDescription: data.current.weather[0].description,\r\n    humidity: data.current.humidity,\r\n    pressure: data.current.pressure,\r\n    windSpeed: data.current.wind_speed,\r\n    visibility: data.current.visibility\r\n})\r\n\r\nconst formatDailyData = (data) =>\r\n    data.daily.map(item => ({\r\n        date: getDateOnly(item.dt),\r\n        day: getDay(item.dt),\r\n        shortDescription: item.weather[0].description,\r\n        icon: item.weather[0].icon,\r\n        weatherStatus: item.weather[0].main,\r\n        humidity: item.humidity,\r\n        windSpeed: item.wind_speed,\r\n        pressure: item.pressure,\r\n        dayTemp: item.temp.day,\r\n        nightTemp: item.temp.night,\r\n        mornTemp: item.temp.morn,\r\n        eveTemp: item.temp.eve,\r\n        minTemp: item.temp.min,\r\n        maxTemp: item.temp.max\r\n    }));\r\n\r\n\r\nexport const makeOpenWeatherApiRequest = (dispatcher, newLocation) => {\r\n    fetch(\"https://muterehm3f.execute-api.us-east-2.amazonaws.com/official/apiweatherapp\",\r\n        { \"method\": \"POST\", body: JSON.stringify({ target: 'openWeather', lon: newLocation.lon, lat: newLocation.lat }) })\r\n        .then(response => response.json())\r\n        .then(data => { console.log(data); return data })\r\n        .then(data => {\r\n            if (data.current && data.daily) {\r\n                newLocation.current = formatCurrentData(data);\r\n                newLocation.daily = formatDailyData(data);\r\n                return newLocation;\r\n            }\r\n            else throw new Error(`Failed to get forecast.`);\r\n        })\r\n        .then(data => { dispatcher({ type: 'addForecast', data: data }); return data })\r\n        .then(console.log)\r\n        .catch(error => { Report.failure(error.message, \"API daily request limit exceeded!!\", \"Ok\"); })\r\n\r\n}\r\n\r\nconst navReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'setSelectedOption':\r\n            return { ...state, selectedOption: action.data };\r\n        case 'setOptions':\r\n            return { ...state, options: action.data ? action.data : state.options };\r\n        case 'setInputValue':\r\n            return { ...state, inputValue: action.data };\r\n        default:\r\n            return { ...state };\r\n    }\r\n};\r\nfunction Nav({ appState, appDispatcher }) {\r\n    const state = { selectedOption: null, inputValue: '', options: [], timeout: useRef(null) };\r\n    const [navState, navDispatcher] = useReducer(navReducer, state);\r\n    useEffect(() => {\r\n        // do not fetch new googlePlaces queries when the user selects an option or when the input is an empty string\r\n        if (navState.inputValue && navState.selectedOption !== navState.inputValue) {\r\n            let query = navState.inputValue;\r\n            clearTimeout(navState.timeout.current);\r\n            navState.timeout.current = setTimeout(() => {\r\n                const url = \"https://muterehm3f.execute-api.us-east-2.amazonaws.com/official/apiweatherapp\";\r\n                const options = { \"method\": \"POST\", body: JSON.stringify({ target: 'googlePlaces', query: query }) }\r\n                fetch(url, options)\r\n                    .then(response => response.json())\r\n                    .then(data => (data.results.length) ? data : (function () { throw new Error(`Unable To Fetch Geo Coordinates for ${query}`) }()))\r\n                    .then(data => data.results.map(item => ({ address: item.formatted_address, name: item.name, location: item.geometry.location})\r\n                    ).filter((i, idx) => idx < 10)) // get only top 10 result\r\n                    .then(data => navDispatcher({ type: 'setOptions', data: data }))\r\n                    .catch(err => { })\r\n\r\n            }, 400)\r\n        }\r\n    }, [navState.inputValue, navState.selectedOption, navState.timeout]);\r\n\r\n\r\n    const submitRequest = () => {\r\n        // only submit request if a user input exists, a drop down option exists, and the user selected a drop down option\r\n        if (navState.selectedOption && navState.inputValue && navState.selectedOption === navState.inputValue) {\r\n            let newLocation = {\r\n                city: navState.selectedOption.name,\r\n                lat: navState.selectedOption.location.lat,\r\n                lon: navState.selectedOption.location.lng,\r\n            };\r\n            makeOpenWeatherApiRequest(appDispatcher, newLocation);\r\n            navDispatcher({ type: 'setSelectedOption', data: null });\r\n        }\r\n        else {\r\n            Report.failure(\"Missing Search Query\",\r\n                \"Queries (input) must be selected from the dropdown menu.\",\r\n                \"Ok\",\r\n                () => { },\r\n                { svgSize: '100px', messageFontSize: '14px', messageColor: '#' }\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <AppBar sx={{ position: 'static', backgroundColor: 'black' }}>\r\n            <Toolbar sx={{ p: '6px' }}>\r\n                <Grid container sx={{ alignItems: 'center', direction: { xs: 'column', md: 'row' } }}>\r\n                    {/* brand container */}\r\n                    <Grid container item sx={{ alignItems: 'center', width: { xs: '1', md: 'auto' } }}>\r\n                        {/* brand logo */}\r\n                        <Grid item>\r\n                            <Box display='block' component='img' src={brandIcon} sx={{ width: '2.5rem', height: '2.5rem' }} />\r\n                        </Grid>\r\n                        {/* brand text */}\r\n                        <Grid item>\r\n                            <Typography variant='h6' sx={{ fontWeight: '400' }}>API Weather App</Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <IconButton>\r\n                            <InfoOutlinedIcon sx={{color:'primary.light'}}/>\r\n                            </IconButton>\r\n                        </Grid>\r\n                        {/* nav collapse button  */}\r\n                        <Grid item sx={{ ml: 'auto' }}>\r\n                            <IconButton onClick={() => appDispatcher({ type: 'toggleCollapseButton' })}>\r\n                                <MenuIcon sx={{ color: 'white', display: { md: 'none', xs: 'block' } }} />\r\n                            </IconButton>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    {/* search container */}\r\n                    <Grid item container direction={{ xs: 'column-reverse', sm: 'row' }} spacing='10' justifyContent='center' alignItems='center' flex='1' py='10px'\r\n                        display={{ md: 'flex', xs: `${appState.collapseButton ? 'none' : 'flex'}` }}>\r\n                        {/* search field */}\r\n                        <Grid item flexGrow={{ sm: '1', md: '0.8', lg: '0.5' }} width={{ xs: '100%', sm: 'auto' }}>\r\n                            <Autocomplete sx={{ backgroundColor: 'white', borderRadius: '0.7rem' }}\r\n                                getOptionLabel={(option) => option.address}\r\n                                options={navState.options}\r\n                                filterOptions={(x) => x}\r\n                                value={navState.selectedOption}\r\n                                onChange={(e, newValue) => {\r\n                                    navDispatcher({ type: 'setSelectedOption', data: newValue });\r\n                                    navDispatcher({ type: 'setInputValue', data: newValue });\r\n                                }}\r\n                                onInputChange={(e, newInputValue) => {\r\n                                    navDispatcher({ type: 'setInputValue', data: newInputValue });\r\n                                }}\r\n                                renderInput={(params) =>\r\n                                    <TextField {...params}\r\n                                        InputProps={{\r\n                                            ...params.InputProps,\r\n                                            size: 'small',\r\n                                            placeholder: 'Enter the Name of a Location',\r\n                                            margin: 'dense',\r\n                                            startAdornment: (<InputAdornment position='start'><SearchIcon /></InputAdornment>)\r\n                                        }}\r\n                                    />}\r\n                            />\r\n                        </Grid>\r\n                        {/* button container  */}\r\n                        <Grid item>\r\n                            <Stack direction='row' spacing={1}>\r\n                                <Button variant='outlined' size='small' sx={{ color: 'primary.light', }} onClick={submitRequest} >Get Forecast</Button>\r\n                                <Button variant='outlined' size='small' color='error' sx={{ color: 'error.light' }} onClick={() => appDispatcher({ type: 'openSettings' })}>Options</Button>\r\n                            </Stack>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default Nav;","import wallpaper from '../images/wallpaper/wallpaper.jpg';\r\nimport wallpaper2 from '../images/wallpaper/wallpaper2.jpg';\r\nimport wallpaper3 from '../images/wallpaper/wallpaper3.jpg';\r\nimport wallpaper4 from '../images/wallpaper/wallpaper4.jpg';\r\nimport wallpaper5 from '../images/wallpaper/wallpaper5.jpg';\r\nimport wallpaper6 from '../images/wallpaper/wallpaper6.jpg';\r\nimport wallpaper7 from '../images/wallpaper/wallpaper7.jpg';\r\nimport wallpaper8 from '../images/wallpaper/wallpaper8.jpg';\r\nimport wallpaper9 from '../images/wallpaper/wallpaper9.jpg';\r\nimport wallpaper10 from '../images/wallpaper/wallpaper10.jpg';\r\nimport wallpaper11 from '../images/wallpaper/wallpaper11.jpg';\r\nimport wallpaper12 from '../images/wallpaper/wallpaper12.jpg';\r\n\r\nconst wallpaperList = [wallpaper, wallpaper2, wallpaper3,\r\n    wallpaper4, wallpaper5, wallpaper6, wallpaper7, wallpaper8,\r\n    wallpaper9, wallpaper10, wallpaper11, wallpaper12];\r\n\r\nexport default wallpaperList;","export default __webpack_public_path__ + \"static/media/wallpaper.dac49862.jpg\";","export default __webpack_public_path__ + \"static/media/wallpaper2.a6e0b2eb.jpg\";","export default __webpack_public_path__ + \"static/media/wallpaper3.6c954cbe.jpg\";","export default __webpack_public_path__ + \"static/media/wallpaper4.fb7fb6d1.jpg\";","export default __webpack_public_path__ + \"static/media/wallpaper5.44dc4f33.jpg\";","export default __webpack_public_path__ + \"static/media/wallpaper6.3f11ff0a.jpg\";","export default __webpack_public_path__ + \"static/media/wallpaper7.17617cbc.jpg\";","export default __webpack_public_path__ + \"static/media/wallpaper8.cbb78813.jpg\";","export default __webpack_public_path__ + \"static/media/wallpaper9.002c2ae5.jpg\";","export default __webpack_public_path__ + \"static/media/wallpaper10.77df1d32.jpg\";","export default __webpack_public_path__ + \"static/media/wallpaper11.f87bb7ee.jpg\";","export default __webpack_public_path__ + \"static/media/wallpaper12.062de8f0.jpg\";","import { Alert, Box, Button, Container, Dialog, DialogContent, DialogTitle, Grid, IconButton, ImageList, ImageListItem, Stack, Switch, Typography } from '@material-ui/core';\r\nimport wallpaperList from './wallpaperList';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nfunction Options({ appState, appDispatcher }) {\r\n    return (\r\n        <Dialog open={appState.settings} onClose={() => appDispatcher({ type: 'closeSettings' })} fullWidth>\r\n            <DialogTitle sx={{ display: 'flex', alignItems: 'center' }}>\r\n                <Typography variant='h5' sx={{ fontWeight: '500' }}>Options</Typography>\r\n                <IconButton sx={{ ml: 'auto' }} onClick={() => appDispatcher({ type: 'closeSettings' })}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            </DialogTitle>\r\n\r\n            <DialogContent sx={{ pb: '0px' }}>\r\n                <Grid container spacing={1} direction='column'>\r\n                    <Grid item>\r\n                        <Stack direction='row' spacing={1} justifyContent='center'>\r\n                            <Button variant='contained' size=\"small\" color='error' sx={{  display: 'block', borderRadius: '0.5rem' }}>Delete local Storage</Button>\r\n                            <Button variant='contained' size=\"small\" color='warning' sx={{  display: 'block', borderRadius: '0.5rem' }}>\r\n                                {appState.enableLocalStorage ? 'Disable Local Storage' : 'Enable Local Storage'}\r\n                            </Button>\r\n                        </Stack>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                        <Container sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                            <Typography variant='h5' sx={{ fontWeight: '500' }}>°C</Typography>\r\n                            <Switch\r\n                                checked={appState.degUnit === 'F'}\r\n                                onChange={() => appDispatcher({ type: 'toggleDegUnit' })}>\r\n                            </Switch>\r\n                            <Typography variant='h5' sx={{ fontWeight: '500' }}>°F</Typography>\r\n                        </Container>\r\n                    </Grid>\r\n                    <Grid item >\r\n                        <Alert sx={{ mx: 'auto', width: '40%', display: 'flex', alignItems: 'center' }}>\r\n                            <Typography sx={{ fontSize: '1.2rem', fontWeight: '500' }}>Choose a Wallpaper</Typography>\r\n                        </Alert>\r\n                        <ImageList cols={3} rowHeight={110} >\r\n                            {wallpaperList.map((item, key) =>\r\n                                <ImageListItem key={key} onClick={() => appDispatcher({ type: 'setWallpaper', data: item })}\r\n                                    sx={{ backgroundImage: `url(${item})`, backgroundSize: 'cover', height: '8rem', cursor: 'pointer', borderRadius: '0.6rem' }}>\r\n\r\n                                    <Box sx={{ display: `${appState.wallpaper === item ? 'flex' : 'none'}`, justifyContent: 'center', alignItems: 'center', height: '100%' }}>\r\n                                        <CheckCircleIcon sx={{ color: 'error.main', fontSize: '4rem' }} />\r\n                                    </Box>\r\n                                </ImageListItem>\r\n                            )}\r\n                        </ImageList>\r\n                    </Grid>\r\n                </Grid>\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n};\r\n\r\nexport default Options;","export default __webpack_public_path__ + \"static/media/pressure.2ad36da1.svg\";","export default __webpack_public_path__ + \"static/media/humidity.5da6ae3c.svg\";","import React, { useState } from 'react';\r\nimport { Grid, Paper, Box, Typography, Stack, IconButton, Menu, MenuItem, Alert } from \"@material-ui/core\";\r\nimport {getTempF } from \"../App\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport pressure from \"../images/pressure.svg\";\r\nimport humidity from \"../images/humidity.svg\";\r\nimport { Confirm } from \"notiflix\";\r\nimport generator from \"element-id-generator\";\r\nimport { makeOpenWeatherApiRequest } from './Nav';\r\n\r\nconst Item = ({ data, appState, appDispatcher }) => {\r\n    const [openOptions, setOpenOptions] = useState(null);\r\n    const confirmDeleteLocation = (dispatcher, lon, lat) => {\r\n        setOpenOptions(null);\r\n        Confirm.show(\r\n            \"❌ Confirm Deletion\",\r\n            \"Are you Sure you want to delete this location?\",\r\n            \"Yes\",\r\n            \"Cancel\",\r\n            () => dispatcher({ type: 'onDeleteForecast', lon:lon, lat:lat }),\r\n            () => { },\r\n            { titleColor: '#e66146', fontFamily: \"quicksand\", useGoogleFont: false }\r\n        )\r\n    }\r\n    return (\r\n        <Grid item sx={{ width: 'fit-content', mb: '1rem'}}>\r\n            <Paper elevation={3} sx={{ p: '0.6rem', background: 'black', color: 'white', border: '0.13rem solid white', borderRadius: '0.7rem' }}>\r\n                {/* header */}\r\n                <Grid container columnSpacing={2}>\r\n                    <Grid item width='fit-content' flexGrow='1' xs>\r\n                        <Stack>\r\n                            <Typography sx={{ color: 'error.light' }}>{data.current.date}</Typography>\r\n                            <Typography variant='h6' sx={{width:'fit-content'}}>{data.city}</Typography>\r\n                        </Stack>\r\n                    </Grid>\r\n\r\n                    <Grid item width='fit-content' alignSelf='center' flexGrow='0' xs>\r\n                        <Stack direction='row' spacing={0.5} justifyContent='between'>\r\n                            <Typography sx={{ color: 'warning.light', fontWeight: '500', fontSize: '2.5rem' }}>\r\n                                {appState.degUnit === 'C' ? (data.current.temp).toFixed() : getTempF(data.current.temp)}°{appState.degUnit}\r\n                            </Typography>\r\n                            <IconButton id=\"long-button\" onClick={(e) => setOpenOptions(e.currentTarget)} sx={{ color: 'white', alignSelf: 'start' }}>\r\n                                <MoreVertIcon className='text-white hover:text-green-600' />\r\n                            </IconButton>\r\n                            <Menu anchorEl={openOptions} open={Boolean(openOptions)} onClose={() => setOpenOptions(null)}>\r\n                                <MenuItem onClick={() => { appDispatcher({ type: 'setSelectedForecast', lon:data.lon, lat:data.lat }); setOpenOptions(null); }}>\r\n                                    Select Location\r\n                                </MenuItem>\r\n                                <MenuItem onClick={() => {\r\n                                    let updatedLocation = {\r\n                                        city: data.city,\r\n                                        lat: data.lat,\r\n                                        lon: data.lon,\r\n                                    };\r\n                                    makeOpenWeatherApiRequest(appDispatcher, updatedLocation);\r\n                                    setOpenOptions(null);\r\n                                }}>\r\n                                    Update Location\r\n                                </MenuItem>\r\n                                <MenuItem onClick={() => confirmDeleteLocation(appDispatcher, data.lon, data.lat)}>\r\n                                    Delete location\r\n                                </MenuItem>\r\n                            </Menu>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {/* body */}\r\n                <Grid container direction='row' justifyContent='between' width='100%' sx={{ backgroundColor: 'warning.mai' }}>\r\n                    {/* weather Status */}\r\n                    <Grid item flexGrow='0.1' sx={{ mt: '-1.5rem' }}>\r\n                        <Stack spacing={-2} alignItems='center'>\r\n                            <Box component='img' width='6rem' src={`http://openweathermap.org/img/wn/${data.current.icon}@2x.png`} />\r\n                            <Typography sx={{ fontWeight: '500', color: 'warning.light', width:'8rem', textAlign:'center' }}>{data.current.shortDescription}</Typography>\r\n                        </Stack>\r\n                    </Grid>\r\n\r\n                    {/* timezone status */}\r\n                    <Grid item flexGrow='1' alignSelf='center' xs>\r\n                        <Stack alignItems='center'>\r\n                            <Typography sx={{ fontWeight: '500', color: 'primary.light' }}>TimeZone</Typography>\r\n                            <Typography sx={{ fontWeight: '400' }}>{data.current.timezone}</Typography>\r\n                        </Stack>\r\n                        <Stack direction='row' spacing={5} justifyContent='center'>\r\n                            <Stack >\r\n                                <Typography sx={{ color: 'primary.light', fontWeight: '500' }}>Sunrise</Typography>\r\n                                <Typography sx={{ fontWeight: '400' }}>{data.current.sunrise}</Typography>\r\n                            </Stack>\r\n                            <Stack sx={{}}>\r\n                                <Typography sx={{ color: 'primary.light', fontWeight: '500' }}>Sunset</Typography>\r\n                                <Typography sx={{ fontWeight: '400' }}>{data.current.sunset}</Typography>\r\n                            </Stack>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {/* footer  */}\r\n                <Grid item xs sx={{ backgroundColor: 're', mt: '0.5rem' }}>\r\n                    <Stack direction='row' width='20rem' spacing={2} sx={{ flexWrap: 'wrap', justifyContent: 'center' }}>\r\n                        <Stack spacing='0.3rem' direction='row' alignItems='center'>\r\n                            <Box component='img' width='1.4rem' src={pressure} alt=\"\" ></Box>\r\n                            <Typography >Pressure: <span style={{ color: 'yellow' }}>{data.current.pressure} hPa</span></Typography>\r\n                        </Stack>\r\n                        <Stack spacing='0.2rem' direction='row' alignItems='center'>\r\n                            <Box component='img' width='1.6rem' src={humidity} alt=\"\"></Box>\r\n                            <Typography >Humidity: <span style={{ color: 'yellow' }}>{data.current.humidity}%</span></Typography>\r\n                        </Stack>\r\n                        <Stack spacing='-0.2rem' direction='row' alignItems='center'>\r\n                            <Box component='i' width='1.6rem' className='fas fa-wind' />\r\n                            <Typography >WindSpeed: <span style={{ color: 'yellow' }}>{data.current.windSpeed} m/s</span></Typography>\r\n                        </Stack>\r\n                        <Stack spacing='-0.2rem' direction='row' alignItems='center'>\r\n                            <Box component='i' width='1.6rem' className='fas fa-smog' />\r\n                            <Typography >Visibility: <span style={{ color: 'yellow' }}>{data.current.visibility} m</span></Typography>\r\n                        </Stack>\r\n\r\n                    </Stack>\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}\r\n\r\n\r\nfunction Locations({ appState, appDispatcher }) {\r\n\r\n    return (\r\n        <Stack spacing={1} sx={{ backgroundColor: 'blu', px: '0.5rem', }}>\r\n             <Alert severity='info' sx={{ width: 'fit-content', alignSelf:'center', mt:'0.5rem', textAlign:'center' }} >Dashboard cards are horizontally scrollable on smaller screens</Alert>\r\n                <Typography variant='h5' alignSelf={{ xs: 'center', sm: 'flex-start' }}\r\n                    sx={{\r\n                        backgroundColor: 'black', fontWeight: 'bold', color: 'primary.light',\r\n                        width: 'fit-content', p: '0.3rem', borderRadius: '0.5rem', border: '0.2rem solid', borderColor: 'warning.light'\r\n                    }}>Dashboard</Typography>\r\n            <Grid container spacing={1} flexWrap='nowrap' sx={{ overflowX: 'auto' }}  mx={{xs:'auto'}}>\r\n                {appState.locationList.map(item =>\r\n                    <Item data={item} key={generator.generate()} appState={appState} appDispatcher={appDispatcher} />)}\r\n            </Grid>\r\n        </Stack>\r\n    )\r\n};\r\n\r\nexport default Locations;","import React, { useState } from 'react';\r\nimport { Grid, Paper, Box, Typography, Stack, IconButton, Menu, MenuItem } from \"@material-ui/core\";\r\nimport {getTempF } from \"../App\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport pressure from \"../images/pressure.svg\";\r\nimport humidity from \"../images/humidity.svg\";\r\nimport { Confirm } from \"notiflix\";\r\nimport generator from \"element-id-generator\";\r\n\r\nconst Item = ({ appState, data }) => (\r\n        <Grid item  sx={{ minWidth: '22rem',  maxWidth: '22rem', mb: '1rem' }} xs>\r\n            <Paper elevation={3} sx={{ p: '0.6rem', background: 'black', color: 'white', border: '0.13rem solid white', borderRadius: '0.7rem' }}>\r\n                {/* header */}\r\n                <Grid container columnSpacing={2}>\r\n                    <Grid item width='fit-content' flexGrow='1' mb='1rem' xs>\r\n                        <Stack>\r\n                            <Typography sx={{ color: 'error.light' }}>{data.date}</Typography>\r\n                            <Typography variant='h5' sx={{  fontWeight: '500' }}>{data.day}</Typography>\r\n                        </Stack>\r\n                    </Grid>\r\n\r\n                    <Grid item={true} width='fit-content' alignSelf='center' flexGrow='0' xs>\r\n                        <Stack direction='row' spacing={0.5} justifyContent='between'>\r\n                            <Typography sx={{ color: 'warning.light', fontWeight: '500', fontSize: '2.5rem' }}>\r\n                                {appState.degUnit === 'C' ? (data.dayTemp).toFixed() : getTempF(data.dayTemp)}°{appState.degUnit}\r\n                            </Typography>\r\n                            <IconButton id=\"long-button\" sx={{ color: 'white', alignSelf: 'start', visibility: 'hidden' }}>\r\n                                <MoreVertIcon className='text-white hover:text-green-600' />\r\n                            </IconButton>\r\n\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {/* body */}\r\n                <Grid container direction='row' justifyContent='between' width='100%' sx={{ backgroundColor: 'warning.mai' }}>\r\n                    {/* weather Status */}\r\n                    <Grid item alignSelf='center' flexGrow='0.1' sx={{ mt: '-1.9rem' }}>\r\n                        <Stack alignItems='center'  spacing={-2}>\r\n                        <Box component='img' width='6rem'  src={`http://openweathermap.org/img/wn/${data.icon}@2x.png`} />\r\n                            <Typography sx={{ fontWeight: '500', color: 'warning.light', width:'fit-content', textAlign:'center' }}>{data.shortDescription}</Typography>\r\n                        </Stack>\r\n                    </Grid>\r\n\r\n                    {/* timezone status */}\r\n                    <Grid item flexGrow='1' alignSelf='center' xs >\r\n                        <Stack item direction='row' justifyContent='space-around'>\r\n                            <Typography>\r\n                                <Box component='span' sx={{ color: 'primary.light' }}>Min: </Box>\r\n                                <Box component='span' sx={{ color: 'yellow' }}>\r\n                                    {appState.degUnit === 'C' ? (data.minTemp).toFixed() : getTempF(data.minTemp)}°{appState.degUnit}\r\n                                </Box>\r\n                            </Typography>\r\n                            <Typography>\r\n                                <Box component='span' sx={{ color: 'primary.light' }}>Max: </Box>\r\n                                <Box component='span' sx={{ color: 'yellow' }}>\r\n                                    {appState.degUnit === 'C' ? (data.maxTemp).toFixed() : getTempF(data.maxTemp)}°{appState.degUnit}\r\n                                </Box>\r\n                            </Typography>\r\n                        </Stack>\r\n\r\n                        <Stack item direction='row' justifyContent='space-around'>\r\n                            <Typography>\r\n                                <Box component='span' sx={{ color: 'primary.light' }}>Day: </Box>\r\n                                <Box component='span' sx={{ color: 'yellow' }}>\r\n                                    {appState.degUnit === 'C' ? (data.dayTemp).toFixed() : getTempF(data.dayTemp)}°{appState.degUnit}\r\n                                </Box>\r\n                            </Typography>\r\n                            <Typography>\r\n                                <Box component='span' sx={{ color: 'primary.light' }}>Night: </Box>\r\n                                <Box component='span' sx={{ color: 'yellow' }}>\r\n                                    {appState.degUnit === 'C' ? (data.nightTemp).toFixed() : getTempF(data.nightTemp)}°{appState.degUnit}\r\n                                </Box>\r\n                            </Typography>\r\n                        </Stack>\r\n\r\n                        <Stack item direction='row' justifyContent='space-around'>\r\n                            <Typography>\r\n                                <Box component='span' sx={{ color: 'primary.light' }}>Morn: </Box>\r\n                                <Box component='span' sx={{ color: 'yellow' }}>\r\n                                    {appState.degUnit === 'C' ? (data.mornTemp).toFixed() : getTempF(data.mornTemp)}°{appState.degUnit}\r\n                                </Box>\r\n                            </Typography>\r\n                            <Typography>\r\n                                <Box component='span' sx={{ color: 'primary.light' }}>Eve: </Box>\r\n                                <Box component='span' sx={{ color: 'yellow' }}>\r\n                                    {appState.degUnit === 'C' ? (data.eveTemp).toFixed() : getTempF(data.eveTemp)}°{appState.degUnit}\r\n                                </Box>\r\n                            </Typography>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                {/* footer  */}\r\n                <Grid item xs sx={{ backgroundColor: 're', mt: '0.5rem' }}>\r\n                    <Stack direction='row' width='20rem' spacing={2} sx={{ flexWrap: 'wrap', justifyContent: 'center' }}>\r\n                        <Stack spacing='0.3rem' direction='row' alignItems='center'>\r\n                            <Box component='img' width='1.4rem' src={pressure} alt=\"\" ></Box>\r\n                            <Typography >Pressure: <span style={{ color: 'yellow' }}>{data.pressure} hPa</span></Typography>\r\n                        </Stack>\r\n                        <Stack spacing='0.2rem' direction='row' alignItems='center'>\r\n                            <Box component='img' width='1.6rem' src={humidity} alt=\"\"></Box>\r\n                            <Typography >Humidity: <span style={{ color: 'yellow' }}>{data.humidity}%</span></Typography>\r\n                        </Stack>\r\n                        <Stack spacing='-0.2rem' direction='row' alignItems='center'>\r\n                            <Box component='i' width='1.6rem' className='fas fa-wind' />\r\n                            <Typography >WindSpeed: <span style={{ color: 'yellow' }}>{data.windSpeed} m/s</span></Typography>\r\n                        </Stack>\r\n\r\n                    </Stack>\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n);\r\n\r\nfunction Forecast({appState}) {\r\n\r\n    return (\r\n        <Stack spacing={1} sx={{ backgroundColor: 'blu', px: '0.5rem' }} >\r\n            <Typography variant='h5'  alignSelf={{xs:'center', sm:'flex-start'}}\r\n                sx={{\r\n                    backgroundColor: 'black', fontWeight: 'bold', color: 'primary.light', width: 'fit-content',\r\n                    p: '0.3rem', borderRadius: '0.5rem', border: '0.2rem solid', borderColor: 'warning.light'\r\n                }}>\r\n                8-Day Forecast For {appState.selectedForecast.city}\r\n            </Typography>\r\n            <Grid container flexWrap='wrap' columnSpacing={{ xs: '0', sm:'1' }} maxWidth='90rem' justifyContent={{xs:'center', sm:'flex-start'}} >\r\n                {appState.selectedForecast.daily.map(item => <Item data={item} key={generator.generate()} appState={appState}/>)}\r\n            </Grid>\r\n        </Stack>\r\n    )\r\n};\r\n\r\nexport default Forecast;","export default __webpack_public_path__ + \"static/media/sunny.213f9a41.svg\";","import { useEffect, useReducer, useState } from 'react';\nimport { Box, Grid, Stack, Toolbar } from \"@material-ui/core\";\nimport Nav from \"./components/Nav\";\nimport Options from \"./components/Options\";\nimport Locations from \"./components/Locations\";\nimport Forecast from \"./components/Forecast\";\nimport wallpaperList from './components/wallpaperList';\nimport sunny from \"./images/weather-icons/sunny.svg\";\nimport { use100vh } from 'react-div-100vh';\nimport React from 'react';\n\nexport const getTempF = (temp) => ((temp * (9 / 5)) + 32).toFixed();\n\nconst getRandomInt = (max) => Math.floor(Math.random() * max);\n\nconst onDeleteForecast = (state, lon, lat) => {\n  let newList = state.locationList.filter(item => item.lon !== lon && item.lat !== lat);\n  let selectedForecast = state.selectedForecast.lon === lon && state.selectedForecast.lat === lat ? (newList[0]) : state.selectedForecast;\n  return { ...state, locationList: newList, selectedForecast: selectedForecast };\n};\n\nconst onAddForecast = (state, data) => {\n  let newList = state.locationList.filter(item => item.lon !== data.lon && item.lat !== data.lat);\n  newList = [data, ...newList];\n  return { ...state, locationList: newList, selectedForecast: data }\n}\n\nconst state = {\n  locationList: [],\n  selectedForecast: null,\n  settings: false,\n  degUnit: 'F',\n  collapseButton: false,\n  wallpaper: wallpaperList[2 || getRandomInt(12)],\n  deleteLocalStorage: true,\n  enableLocalStorage:true\n};\n\nconst dispatcher = (state, action) => {\n  switch (action.type) {\n    case 'setLocalStorage':\n      localStorage.setItem('appState', JSON.stringify(state));\n      return { ...state };\n    case 'setState':\n      return { ...action.data };\n    case 'addForecast':\n      return onAddForecast(state, action.data);\n    case 'setSelectedForecast':\n      return { ...state, selectedForecast: state.locationList.find(location => location.lat === action.lat && location.lon === action.lon) }\n    case 'onDeleteForecast':\n      return onDeleteForecast(state, action.lon, action.lat);\n    case 'toggleCollapseButton':\n      return { ...state, collapseButton: !state.collapseButton }\n    case 'setWallpaper':\n      return { ...state, wallpaper: action.data }\n    case 'toggleDegUnit':\n      return { ...state, degUnit: state.degUnit === 'F' ? 'C' : 'F' }\n    case 'openSettings':\n      return { ...state, settings: true };\n    case 'closeSettings':\n      return { ...state, settings: false }\n    default:\n      return state;\n  }\n}\n\n\nfunction App() {\n  const [appState, appDispatcher] = useReducer(dispatcher, state);\n  let height = use100vh();\n\n  useEffect(() => {\n    if (appState.enableLocalStorage && localStorage.getItem('appState')) {\n      let newState = JSON.parse(localStorage.getItem('appState'));\n      appDispatcher({ type: 'setState', data: newState });\n    }\n  },[]);\n\n  useEffect(() => {\n    if ( appState.enableLocalStorage) {\n      localStorage.setItem('appState', JSON.stringify(appState));\n    }\n  }, [appState])\n\n  return (\n    <Grid container direction='column' height={window.innerHeight}>\n      <Grid item >\n        <Nav appState={appState} appDispatcher={appDispatcher} />\n      </Grid>\n      <Grid item width='100vw' sx={{\n        backgroundImage: `url(${appState.wallpaper})`, backgroundSize: 'cover',\n        backgroundPosition: 'center', overflowY: 'auto', flex: '1', overflowX: 'hidden'\n      }} >\n        <Stack spacing={3} >\n          <Locations appState={appState} appDispatcher={appDispatcher} />\n          {+Boolean(appState.selectedForecast) && <Forecast appState={appState} />}\n        </Stack>\n      </Grid>\n\n      <Options appState={appState} appDispatcher={appDispatcher} />\n    </Grid>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n// const getData = () => ([\n//   {\n//     city: '8417 Spruce Hill Dr',\n//     lat: '0',\n//     lon: '0',\n//     key: '00',\n//     current: {\n//       day: 'Monday',\n//       date: 'July, 6th, 08:37am',\n//       timezone: 'America/NewYork',\n//       sunrise: '08:00am',\n//       sunset: '07:00pm',\n//       temp: '0',\n//       icon: sunny,\n//       weatherStatus: 'Sunny',\n//       shortDescription: 'Light rain, gentle breeze.',\n//       humidity: '100',\n//       pressure: '100',\n//       windSpeed: '200',\n//       visibility: '300'\n//     },\n//     daily: [\n//       ,{\n//         date: 'July, 6th, 08:37am',\n//         day: 'Monday',\n//         key: 'Monday 00',\n//         description: 'light rain',\n//         icon: sunny,\n//         weatherStatus: 'Sunny',\n//         humidity: '100',\n//         windSpeed: '200',\n//         pressure: '100',\n//         dayTemp: '0',\n//         nightTemp: '0',\n//         mornTemp: '0',\n//         eveTemp: '0',\n//         minTemp: '0',\n//         maxTemp: '0',\n//       },\n//       {\n//         date: 'July, 6th, 08:37am',\n//         day: 'Monday',\n//         key: 'Monday 00',\n//         description: 'light rain',\n//         icon: sunny,\n//         weatherStatus: 'Sunny',\n//         humidity: '100',\n//         windSpeed: '200',\n//         pressure: '100',\n//         dayTemp: '0',\n//         nightTemp: '0',\n//         mornTemp: '0',\n//         eveTemp: '0',\n//         minTemp: '0',\n//         maxTemp: '0',\n//       },\n//       {\n//         date: 'July, 6th, 08:37am',\n//         day: 'Tuesday',\n//         key: 'Tuesday 00',\n//         description: 'light rain',\n//         icon: sunny,\n//         weatherStatus: 'Sunny',\n//         humidity: '100',\n//         windSpeed: '200',\n//         pressure: '100',\n//         dayTemp: '0',\n//         nightTemp: '0',\n//         mornTemp: '0',\n//         eveTemp: '0',\n//         minTemp: '0',\n//         maxTemp: '0',\n//       },\n//       {\n//         date: 'July, 6th, 08:37am',\n//         day: 'Monday',\n//         key: 'Monday 11',\n//         description: 'light rain',\n//         icon: sunny,\n//         weatherStatus: 'Sunny',\n//         humidity: '100',\n//         windSpeed: '200',\n//         pressure: '100',\n//         dayTemp: '0',\n//         nightTemp: '0',\n//         mornTemp: '0',\n//         eveTemp: '0',\n//         minTemp: '0',\n//         maxTemp: '0',\n//       },\n//       {\n//         date: 'July, 6th, 08:37am',\n//         day: 'Monday',\n//         key: 'Monday 11',\n//         description: 'light rain',\n//         icon: sunny,\n//         weatherStatus: 'Sunny',\n//         humidity: '100',\n//         windSpeed: '200',\n//         pressure: '100',\n//         dayTemp: '0',\n//         nightTemp: '0',\n//         mornTemp: '0',\n//         eveTemp: '0',\n//         minTemp: '0',\n//         maxTemp: '0',\n//       },\n//       {\n//         date: 'July, 6th, 08:37am',\n//         day: 'Monday',\n//         key: 'Monday 11',\n//         description: 'light rain',\n//         icon: sunny,\n//         weatherStatus: 'Sunny',\n//         humidity: '100',\n//         windSpeed: '200',\n//         pressure: '100',\n//         dayTemp: '0',\n//         nightTemp: '0',\n//         mornTemp: '0',\n//         eveTemp: '0',\n//         minTemp: '0',\n//         maxTemp: '0',\n//       },\n//       {\n//         date: 'July, 6th, 08:37am',\n//         day: 'Monday',\n//         key: 'Monday 11',\n//         description: 'light rain',\n//         icon: sunny,\n//         weatherStatus: 'Sunny',\n//         humidity: '100',\n//         windSpeed: '200',\n//         pressure: '100',\n//         dayTemp: '0',\n//         nightTemp: '0',\n//         mornTemp: '0',\n//         eveTemp: '0',\n//         minTemp: '0',\n//         maxTemp: '0',\n//       },\n//       {\n//         date: 'July, 6th, 08:37am',\n//         day: 'Monday',\n//         key: 'Monday 11',\n//         description: 'light rain',\n//         icon: sunny,\n//         weatherStatus: 'Sunny',\n//         humidity: '100',\n//         windSpeed: '200',\n//         pressure: '100',\n//         dayTemp: '0',\n//         nightTemp: '0',\n//         mornTemp: '0',\n//         eveTemp: '0',\n//         minTemp: '0',\n//         maxTemp: '0',\n//       },\n//     ]\n//   },\n//   {\n//     city: 'chicago',\n//     lat: '0',\n//     lon: '1',\n//     key: '01',\n//     current: {\n//       day: 'Monday',\n//       date: 'July, 6th, 08:37am',\n//       timezone: 'America/NewYork',\n//       sunrise: '08:00am',\n//       sunset: '07:00pm',\n//       temp: '0',\n//       icon: sunny,\n//       weatherStatus: 'Sunny',\n//       shortDescription: 'Light rain, gentle breeze.',\n//       humidity: '100',\n//       pressure: '100',\n//       windSpeed: '200',\n//       visibility: '300'\n//     },\n//     daily: [\n//       {\n//         date: 'July, 6th, 08:37am',\n//         day: 'Monday',\n//         key: 'Monday 01',\n//         shortDescription: 'light rain',\n//         icon: sunny,\n//         weatherStatus: 'Sunny',\n//         humidity: '100',\n//         windSpeed: '200',\n//         pressure: '100',\n//         dayTemp: '0',\n//         nightTemp: '0',\n//         mornTemp: '0',\n//         eveTemp: '0',\n//         minTemp: '0',\n//         maxTemp: '0',\n//       },\n//       {\n//         date: 'July, 6th, 08:37am',\n//         day: 'Tuesday',\n//         key: 'Tuesday 01',\n//         description: 'light rain',\n//         icon: sunny,\n//         weatherStatus: 'Sunny',\n//         humidity: '100',\n//         windSpeed: '200',\n//         pressure: '100',\n//         dayTemp: '0',\n//         nightTemp: '0',\n//         mornTemp: '0',\n//         eveTemp: '0',\n//         minTemp: '0',\n//         maxTemp: '0',\n//       }\n//     ]\n//   }\n//   , \n//   {\n//     city: 'new york',\n//     lat: '1',\n//     lon: '1',\n//     key: '11',\n//     current: {\n//       day: 'Monday',\n//       date: 'July, 6th, 08:37am',\n//       timezone: 'America/NewYork',\n//       sunrise: '08:00am',\n//       sunset: '07:00pm',\n//       temp: '0',\n//       icon: sunny,\n//       weatherStatus: 'Sunny',\n//       shortDescription: 'Light rain, gentle breeze.',\n//       humidity: '100',\n//       pressure: '100',\n//       windSpeed: '200',\n//       visibility: '300'\n//     },\n//     daily: [\n//       {\n//         date: 'July, 6th, 08:37am',\n//         day: 'Monday',\n//         key: 'Monday 11',\n//         description: 'light rain',\n//         icon: sunny,\n//         weatherStatus: 'Sunny',\n//         humidity: '100',\n//         windSpeed: '200',\n//         pressure: '100',\n//         dayTemp: '0',\n//         nightTemp: '0',\n//         mornTemp: '0',\n//         eveTemp: '0',\n//         minTemp: '0',\n//         maxTemp: '0',\n//       },\n//       , {\n//         date: 'July, 6th, 08:37am',\n//         day: 'Monday',\n//         key: 'Monday 11',\n//         description: 'light rain',\n//         icon: sunny,\n//         weatherStatus: 'Sunny',\n//         humidity: '100',\n//         windSpeed: '200',\n//         pressure: '100',\n//         dayTemp: '0',\n//         nightTemp: '0',\n//         mornTemp: '0',\n//         eveTemp: '0',\n//         minTemp: '0',\n//         maxTemp: '0',\n//       },\n//       {\n//         date: 'July, 6th, 08:37am',\n//         day: 'Monday',\n//         key: 'Monday 11',\n//         description: 'light rain',\n//         icon: sunny,\n//         weatherStatus: 'Sunny',\n//         humidity: '100',\n//         windSpeed: '200',\n//         pressure: '100',\n//         dayTemp: '0',\n//         nightTemp: '0',\n//         mornTemp: '0',\n//         eveTemp: '0',\n//         minTemp: '0',\n//         maxTemp: '0',\n//       },\n//       {\n//         date: 'July, 6th, 08:37am',\n//         day: 'Tuesday',\n//         key: 'Tuesday 11',\n//         description: 'light rain',\n//         icon: sunny,\n//         weatherStatus: 'Sunny',\n//         humidity: '100',\n//         windSpeed: '200',\n//         pressure: '100',\n//         dayTemp: '0',\n//         nightTemp: '0',\n//         mornTemp: '0',\n//         eveTemp: '0',\n//         minTemp: '0',\n//         maxTemp: '0',\n//       }\n//     ]\n//   }\n// ]);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nwindow.console = {\n  ...window.console,\n  error: () => { },\n  warn: () => {},\n \n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}